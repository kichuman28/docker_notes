(Q.1)   What is docker?
=> It's a virtualisation software. 
=> Makes developing and deploying applications easier.
=> Packages apps with everything you need such as dependencies, configurations, system tools, runtime etc.
=> Basically a standardized unit that has everything you need to run. 
=> It's portable, easily shared and distributed.


(Q.2)   How was the development process before containers?
=> Before if a team is working on the development of some application and I wanted to run it in my system,
I had to install all the necessary software in my OS to run it. This is a pain in the ass for the for 2 reasons
1) Installation process is different for each OS environment. (MacOS, Windows) 
2) Many steps where something can go wrong.

(Q.3)   How did docker solve this issue?
=> Docker gives us our own isolated environment.
=> For example if we are using Postgres then  it is packaged with all the dependencies and configurations I need.

(Q.4)   How do we do it?
=> If I want the Postgres environment in my system, I run the docker command first. That is universal for every OS.
The command is 'docker run postgress'.
=> What happens is that it fetches the container containing postgres environment and installs it in your computer.
=> Same for all services as well (javascript, numpy whatever it is)
=> We can also run different versions of the same sevice without any conflicts like 
redis 3.1, redis 3.5, redis 4.5 etc

TL:DR => Docker standardizes the process of running any service on any local dev environment.

(Q.5)   How was the deployment process done before containers?
=> The development team would develop a package/artifact (for the service & database) and create a set of instructions on how to run them.
=> This is given to the operations team who tries to set this whole thing up on the server. 
=> During this process besides being a pain installing everything manually, many things can go wrong such as miscommunication, human errors etc.

(Q.6)   How is the deployment process done with docker?
=> The deployment team creates a docker artifact where everything is packaged, including the source code, dependencies, configs etc
=> Now the ops team only have to install docker on the server and run the docker file for each services. Easy.


(Q.7)   Why is docker used so widely and what is the difference between docker and virtual machines then? Aren't they the same?
=> To answer this question we need to know how an OS works. So an OS has two layers. One layer is the Kernel layer and the 
other is the application layer. So the kernel layer interacts with the hardware and allocates the resources to the application 
layer. The application layer is where all applications run on the OS's power.

=> So a virtual machine virtualizes both the layers. The application as well as the kernel.
=> Docker container only virtualizes the application layer. 

(Q.8)   So what are the major differences between the two?

Size
=> Docker images, couple of MB (Only application layer)
=> VM Images, couple of GB (Both OS Kernel & OS application layer)

Speed
=> Docker images takes only seconds to start
=> VMs takes minutes to start.

Compatibility 
=> Docker is only compatible with linux distributions. It was originally made for linux
=> VM is compatible with all OS, as even the kernel is virtualised.

(Q.9)   So can docker work on Windows and Mac? 
=> The docker application layer is linux based so it can't work on windows or mac kernel. 
That's where Docker Desktop comes in. 
=> Docker desktop uses a hypervisor with a linux distribution which allows the docker images to work on windows and mac.

(Q.10)  What is the difference between Docker Images and Docker Containers?
=> Docker Images: Images basically contain everything you need to run the project, such as the code, dependencies, configurations etc. 
=> Docker Containers: So after getting the Docker Image in a local system (my laptop) I need to run the application in this image somewhere. 
The place where you run this application is called a container. You can have multiple containers of the same Image. They can also be called an
instance in that regard. 

TL:DR : A Docker Image is a immutable(can't modify) template that defines how a container will be made whereas a Docker Container is a running instance
of that image. 

(Q.11)  So suppose I want to run an instance of Postgres image. From where do I get this image?
=> So all the images are available in a kind of image storage called Docker Registries. It contains ready to use images that we can 
use to create instances anytime. 
Docker Registries = > A storage for docker image type of artifacts. 
Official images are available here made by companies such as Redis, Mongo, Postgres etc which are verified by Docker.
There are consists of images that are made by the community as well. 
Docker hosts one of the biggest Docker Registry called the "Docker Hub"
The Hub is more like a user interface to see everything in the Docker Registry. 


(Q.11)  How are the images maintained in the docker hub?
=> So a specific team from Docker as well as the company providing the service work together to create an official instance.
So for each service, there are different versions of the same thing. There exists Docker Images for every single version. These
versions are called 'tags'. If no version is mentioned while downloading the Image we want then by default the latest version of 
the image is downloded. 


(Q.12)  What are the steps to get an application running from the Docker Registry?
=> First we pull the image of the application from the Docker Registry using 'docker pull {name}:{tag}' command. Then we create
a container using the command 'docker run {name}:{tag}',or in -d if you want it in detached mode. 


(Q.13)  Okay fine we made the container. It's running in my local system now. How do I access the application in this container?
=> Every application runs in a specific port number. So the port number for the running container is shown so we can just go to browser
and type in localhost:{port_number} to get access to it. But if you use the port number shown in the 'docker ps' command you can't access 
it because you need to do something called "Port Binding" first.

(Q.14)  What is Port Binding?
=> So the container is running in it's own kinda OS which has it's own port numbers etc where the application is running. So my local system
can't access it. So what I'm doing is binding that port number to some other port number in my local system and telling it to run in the 
new port number. For that I run the command 'docker run -d -p{HOST_PORT}:{CONTAINER_PORT} {name}:{tag}'. So this command exposes the container
to the local network. 

(Q.15) Is there any simple way to use commands that require the container ID? Since it's too difficult to remember them. 
=> So everytime a container is created it is also given a random name. We can set the name first when we create the container. Using that name
we can use it in place of all the commands that require the docker ID such as "docker stop {id}", "docker log {id}" with "docker stop {name}", "docker log {name}".
So to do that we add a flag with the docker run command that goes like "docker run --name {name of container}".

(Q.16) So each time we run a container does it restart everytime or continues from where we stopped before?
=> So each time we run the command to start a container a new one is created. The old ones are not deleted, they are still there. "docker ps" only
shows the list of active containers. If we want to see the list of all the containers we have used till now we add a flag to it that goes like
"docker ps -a" where a stands for "-a or --all : List of all stopped and running containers". If we want to run any stopped containers again
we can type docker ps -a, check out either the container ID or container name and again run that same container using the command called
"docker start {container id/name}".


(Q.17)  What are Private Docker Registries?
=> So Docker Hub is a public Docker Registry where the Docker Images are shared to the general public and it can be seen by everyone.
What if some company created a Docker Image for their software and wants it to store somewhere private? This is the reason why private docker
registries exits. Every cloud service provider has their own private docker registry. Even Docker has one of it's own.

(Q.18)  What is the difference between Docker Registry and Docker Repository?
=> Docker Repository is provided by cloud services where we can store the Images of our applications with different versions, whereas Docker 
Registries is where we store both private and public Images. 

(Q.19)  How do we make custom images for our application?
=> To start creating our own custom images, first we have to write a "definition" of how to build an image from our application. We write this
definition in a file called 'Dockerfile'. For more info check the Dockerfile_structure.txt.

(Q.20)  What's the next step after writing the dockerfile?
=> After writing the dockerfile, now you need to build it as an image. For that you simply run the "build" command using 
"docker build {location of dockerfile}". We can also give our image a name and version using the "-t" flag. Now the syntax looks like
"docker build -t {name of image}:{version} {location of dockerfile}"